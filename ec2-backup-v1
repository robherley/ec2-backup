#!/usr/bin/env python3
from subprocess import run, Popen, PIPE
import argparse
import json
import pprint


def parse_args():
    """Parses command line arguments"""
    parser = argparse.ArgumentParser(description="""Creates an instance
                                     suitable for the specified volume,
                                     attaches the volume to the instance,
                                     and remotely logs in on the instance
                                     and displays the disklabel of the attached
                                     volume.""")
    parser.add_argument('-v', required=True, metavar="volume-id",
                        help="id of the volume to mount")
    return parser.parse_args()


def error(msg: str):
    print(f'ec2-backup-v1: error: {msg}')
    exit(1)


def run_aws(cmd: str) -> dict:
    """Given a string, run the aws command in a subprocess and parse the json
    output into a dict

    Arguments:
        cmd {str} -- command to execute

    Returns:
        dict -- parsed JSON output
    """

    try:
        proc = run(cmd, shell=True, check=True, capture_output=True)
        j = json.loads(proc.stdout)
        return j
    except subprocess.CalledProcessError as e:
        error(f"an error occurred in the aws subprocess:\n {e}")
    except json.JSONDecodeError as e:
        error(f"unable to parse aws-cli output:\n {e}")
    except Exception as e:
        error(f"an unknown error has occurred:\n {e}")


def find_ec2_ami(region: str) -> dict:
    """Finds the latest Ubuntu 16.04 LTS AMI in a specified region

    Arguments:
        region {str} -- region to search for EC2 AMI

    Returns:
        dict -- information about compatible ami
    """

    ami = run_aws(("aws ec2 describe-images --owners 099720109477 --filters"
                   " 'Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-xenial-"
                   "16.04-amd64-server-????????' 'Name=state,Values="
                   "available' --query 'sort_by(Images, &CreationDate)[-1]"
                   ".{name: Name, id: ImageId}'",
                   f" --output json --region " + region))
    return ami


def find_volume(id: str) -> dict:
    """Finds an EBS volume based on a specified id

    Arguments:
        id {str} -- id of volume to find

    Returns:
        dict -- information about the specified volume
    """
    regions = run_aws(("aws ec2 describe-regions --query "
                       "'Regions[*].RegionName' --output json"))
    def vol(r): return (f"aws ec2 describe-volumes --region {r} --query"
                        f" 'Volumes[0]' --output json --volume-id {id}")
    procs = [Popen(vol(i), shell=True, stdout=PIPE, stderr=PIPE)
             for i in regions]
    for p in procs:
        p.wait()
    try:
        vol_index = list(map(lambda x: x.returncode, procs)).index(0)
        vol_info = json.loads(procs[vol_index].stdout.read())
        if vol_info['State'] != 'available':
            error(f'specified volume ({id}) is not available')
        return vol_info
    except ValueError:
        error(f"specified volume ({id}) was not found in any region")
    except json.JSONDecodeError as e:
        error(f"unable to parse aws-cli output:\n {e}")
    except Exception as e:
        error(f"\n{e}")


def main():
    args = parse_args()
    vol = find_volume(args.v)
    ami = find_ec2_ami("us-east-1")
    pp = pprint.PrettyPrinter(indent=4)
    print("Volume:")
    pp.pprint(vol)
    print("\nAMI:")
    pp.pprint(ami)


if __name__ == "__main__":
    main()
