Robert Herley <rherley>
HW2 - ec2-backup-v1

The Solution
============

Simply put, my program is a collection of various aws-cli commands invoked in
python subprocesses, and wrapped in various data structures. Every aws-cli 
command is outputted in JSON format, which is then parsed into a Python 
dictionary and used by various methods. 
Here's the basic methodology of the program:
  1.  Get volume id from the arguments.
  2.  Check to see if the volume is within a region that supports a prebuilt
      NetBSD AMI and see if the volume is available to be mounted. If these 
      conditions hold, grab the Availability Zone.
  3.  Create a NetBSD instance in the same region/AZ as the volume.
  4.  Wait for the instance to be in the "running" state as reported by AWS.
  5.  Grab the Public DNS of the instance.
  6.  Attach the specified volume to "/dev/sdx" of the instance.
  7.  SSH into the instance (via subprocess), and execute the following:
        "/sbin/disklabel /dev/xbd2 2>&1; exit 0"
      See Problems Encountered for an explanation.
  8.  Grab stdout from subprocess, and print the output of disklabel.
  9.  Terminate the instance.


Why Python?
===========

Python (3) seemed like the best candidate for a multitude of reasons, but mostly
because I'm experienced in it, and Amazon's boto3 SDK for AWS. Unfortunately,
pip3 was not available on the Linux Lab, so I was unable to use it. Luckily,
Python has really convenient subprocess libraries built-in for spawning new 
processes, connecting to their input/output/error pipes, and obtain their return
codes. Using these libraries, it was trivial to create functions to pass around
the output from the aws-cli. While this could've done with a bash script, I
personally felt that the code would be much more readable and extendable by
utilizing Python's various data structures.


Problems Encountered
====================

While not exactly a problem, it took a noticeably long time for the NetBSD SSH
sessions to be established after being created, even when AWS is reporting the
instance in a "running" state. Compared to the Ubuntu AMIs, the time between
creation to SSH session established felt like eternity with NetBSD. 

A huge headache I encountered was that SSH was returning a 102 exit code in my
python subprocess, which was then raising an exception. But, it would raise this
exception even though the SSH exec for "disklabel /dev/xbd2" was working 
properly. After a lot of coffee, I figured out the error. The following text was
being sent to stderr:
  disklabel: boot block size 0
  disklabel: super block size 0
In addition, disklabel(8) was exiting with a 102 code. Eventually, I settled 
with "/sbin/disklabel /dev/xbd2 2>&1; exit 0". Although it's not elegant, it 
works.